/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/shahpratikr/k8s-dev-assignments/assignment-1/pkg/apis/shahpratikr.dev/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SnapshotBackupLister helps list SnapshotBackups.
// All objects returned here must be treated as read-only.
type SnapshotBackupLister interface {
	// List lists all SnapshotBackups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SnapshotBackup, err error)
	// SnapshotBackups returns an object that can list and get SnapshotBackups.
	SnapshotBackups(namespace string) SnapshotBackupNamespaceLister
	SnapshotBackupListerExpansion
}

// snapshotBackupLister implements the SnapshotBackupLister interface.
type snapshotBackupLister struct {
	indexer cache.Indexer
}

// NewSnapshotBackupLister returns a new SnapshotBackupLister.
func NewSnapshotBackupLister(indexer cache.Indexer) SnapshotBackupLister {
	return &snapshotBackupLister{indexer: indexer}
}

// List lists all SnapshotBackups in the indexer.
func (s *snapshotBackupLister) List(selector labels.Selector) (ret []*v1alpha1.SnapshotBackup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SnapshotBackup))
	})
	return ret, err
}

// SnapshotBackups returns an object that can list and get SnapshotBackups.
func (s *snapshotBackupLister) SnapshotBackups(namespace string) SnapshotBackupNamespaceLister {
	return snapshotBackupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SnapshotBackupNamespaceLister helps list and get SnapshotBackups.
// All objects returned here must be treated as read-only.
type SnapshotBackupNamespaceLister interface {
	// List lists all SnapshotBackups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SnapshotBackup, err error)
	// Get retrieves the SnapshotBackup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SnapshotBackup, error)
	SnapshotBackupNamespaceListerExpansion
}

// snapshotBackupNamespaceLister implements the SnapshotBackupNamespaceLister
// interface.
type snapshotBackupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SnapshotBackups in the indexer for a given namespace.
func (s snapshotBackupNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SnapshotBackup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SnapshotBackup))
	})
	return ret, err
}

// Get retrieves the SnapshotBackup from the indexer for a given namespace and name.
func (s snapshotBackupNamespaceLister) Get(name string) (*v1alpha1.SnapshotBackup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("snapshotbackup"), name)
	}
	return obj.(*v1alpha1.SnapshotBackup), nil
}
